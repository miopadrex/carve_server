type User {
  id: ID! @id
  name: String
  email: String @unique @default(value:"")
  emailVerfied: Boolean @default(value: false)
  phoneVerfied: Boolean @default(value: false)
  password: String
  phoneNumber: String @unique
  kakaoAuthId: String @unique
  kakaoPlusId: String @unique
  instaId: String @unique
  naverAuthId: String @unique
  avatar: String @default(value: "miopadre.com")
  gender: String
  age: Int
  writeFavs:[Fav!]! @relation(name: "FavsOfUser" onDelete: CASCADE)
  writeReviews: [Review!]! @relation(name:"ReviewOfUser" onDelete: CASCADE) 
  reservationsAsUser: [Reservation!]! @relation(name:"ReservationAsUser" onDelete:CASCADE)
  estimateRequestUser: [Estimate!] @relation(name:"EstimateOfUser" onDelete:CASCADE)
  rule: Role! @default(value: USER)
  isTattooist: Boolean! @default(value: false)
  storeName: String
  location: String
  guarantee: Boolean @default(value:false)
  parking: Boolean @default(value:false) 
  recommendation: Boolean @default(value:false)
  asReviews: [Review!]! @relation(name: "ReviewOfTattoist" onDelete: CASCADE)
  reservationsAsTatooist: [Reservation!]! @relation(name:"ReservationAsTattooist" onDelete:CASCADE)
  tattoos: [Tattoo!]! @relation(name: "TattooOfTattooist" onDelete: CASCADE)
  favs: [Fav!]! @relation(name: "FavsOfTattooist" onDelete: CASCADE)
  tattooistEstimate: [Estimate!] @relation(name:"EstimateOfTattooist" onDelete:CASCADE)
  sgEstimate:[SgEstimate!]  @relation(name:"SgEstimateOfTattooist" onDelete:CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Tattoo {
  id: ID! @id
  title: String!
  contents: String!
  images: [File!]! @relation(name: "FileOfTattoo" onDelete: CASCADE)
  writeUser: User! @relation(name: "TattooOfTattooist")
  price: String!
  genre: String!
  subject: String!
  part: String!
  size: String!
  numberOfTask: String!
  workTime: String!
  sale: Boolean! @default(value:false)
  payCard: Boolean @default(value:false) 
  payDivision : Boolean @default(value:false) 
  isFav: Boolean! @default(value:false)
  favs: [Fav!]! @relation(name: "FavsOfTattoo" onDelete: CASCADE)
  reviews: [Review!]! @relation(name:"ReviewOfTattoo" onDelete: CASCADE) 
  reservations : [Reservation!]! @relation(name:"ReservationOfTattoo")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Fav {
  id: ID! @id
  writeUser: User! @relation(name: "FavsOfUser")
  tattoo: Tattoo @relation(name: "FavsOfTattoo")
  tattooist: User @relation(name: "FavsOfTattooist")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Review {
  id: ID! @id
  images: [File!]! @relation(name:"FileOfTattooReview" onDelete: CASCADE)
  contents: String!
  grade: Int!
  writeUser: User @relation(name: "ReviewOfUser")
  tattoo: Tattoo @relation(name: "ReviewOfTattoo")
  tattooist: User @relation(name: "ReviewOfTattoist")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type File {
  id: ID! @id
  url: String!
  tattoo: Tattoo @relation(name:"FileOfTattoo") 
  tattooReview: Review @relation(name:"FileOfTattooReview")
  estimate: Estimate @relation(name:"FileOfEstimate")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Verification {
  id: ID! @id
  target: Target!
  payload: String! @unique
  key: String!
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Reservation {
  id: ID! @id
  status: StatusOption! @default(value:REQUESTING)
  requestUser: User! @relation(name:"ReservationAsUser")
  tattooist: User! @relation(name:"ReservationAsTattooist")
  tattoo: Tattoo! @relation(name:"ReservationOfTattoo")
  date: String
  requirements: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Estimate {
  id: ID! @id
  status: StatusOption! @default(value:REQUESTING)
  images: [File!]! @relation(name:"FileOfEstimate")
  size: String
  part: String
  price: String
  location: String
  worksTime: String
  requirements: String
  requestUser: User! @relation(name:"EstimateOfUser")
  tattooist: User @relation(name:"EstimateOfTattooist")
  sgEstimate: [SgEstimate!]! @relation(name:"SgEstimateOfEstimate")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type SgEstimate {
  id: ID! @id
  estimate: Estimate! @relation(name:"SgEstimateOfEstimate")
  suggestions: String
  location: String
  price: String
  worksTime: String 
  isSelect: Boolean @default(value: false)
  tattooist: User! @relation(name:"SgEstimateOfTattooist")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum StatusOption {
  REQUESTING
  ACCEPTED
  CANCELED
  WORKING
  FINISHED
}
enum Target {
  PHONE
  EMAIL
}
enum Role {
  ADMIN
  USER
}
